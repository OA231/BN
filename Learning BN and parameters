library(bnlearn)

train_rose<-data.frame(train_rose)
train_rose$HPVStatus<-as.factor(train_rose$HPVStatus)
test_set<-data.frame(test_set)
test_set$HPVStatus<-as.factor(test_set$HPVStatus)

unlist(bn.boot(train_rose, statistic = ntests, R = 200, m = nrow(train_rose), algorithm = "hc",
               algorithm.args = list(score = "loglik"), debug = TRUE))
               
arcs.hpv <- boot.strength(train_rose, algorithm = "hc", algorithm.args = list(score = "loglik"))
a <- averaged.network(arcs.hpv)
modelstring(averaged.network(arcs.hpv))

# Convert the fitted BN to gRain object

bn.hc<-hc(train_rose,score ="loglik")

netcv.hpv = bn.cv(train_rose,true.dag, loss = "pred", k = 5,
                  loss.args = list(target="HPVStatus"), debug = TRUE)

netcvfit.hpv1 = as.grain(netcv.hpv[[1]]$fitted)
netcvfit.hpv2 = as.grain(netcv.hpv[[2]]$fitted)
netcvfit.hpv3 = as.grain(netcv.hpv[[3]]$fitted)
netcvfit.hpv4 = as.grain(netcv.hpv[[4]]$fitted)
netcvfit.hpv5 = as.grain(netcv.hpv[[5]]$fitted)


hpv_test1 = train_rose[netcv.hpv[[1]]$test, ]
hpv_test2 = train_rose[netcv.hpv[[2]]$test, ]
hpv_test3 = train_rose[netcv.hpv[[3]]$test, ]
hpv_test4 = train_rose[netcv.hpv[[4]]$test, ]
hpv_test5 = train_rose[netcv.hpv[[5]]$test, ]

pred_test1 = predict(netcvfit.hpv1, response = c("HPVStatus"), newdata = hpv_test1,
                     predictors = names(hpv_test1)[-1], type = "distribution")
pred_test2 = predict(netcvfit.hpv2, response = c("HPVStatus"), newdata = hpv_test2,
                     predictors = names(hpv_test2)[-1], type = "distribution")
pred_test3 = predict(netcvfit.hpv3, response = c("HPVStatus"), newdata = hpv_test3,
                     predictors = names(hpv_test3)[-1], type = "distribution")
pred_test4 = predict(netcvfit.hpv4, response = c("HPVStatus"), newdata = hpv_test4,
                     predictors = names(hpv_test4)[-1], type = "distribution")
pred_test5 = predict(netcvfit.hpv5, response = c("HPVStatus"), newdata = hpv_test5,
                     predictors = names(hpv_test5)[-1], type = "distribution")


test_HPV_data=rbind(hpv_test1,hpv_test2,hpv_test3,hpv_test4,hpv_test5)
pred_Test=data.frame(c(pred_test1$pred$HPVStatus[,2],pred_test2$pred$HPVStatus[,2],pred_test3$pred$HPVStatus[,2],
                       pred_test4$pred$HPVStatus[,2],pred_test5$pred$HPVStatus[,2]))

colAUC(pred_Test, test_HPV_data[,1], plotROC = TRUE)

#Test data performance
#trained model
#best_model

true.dag <- netcv.hpv$fit[[which.min(netcv.hpv$bic)]]
bnFitted<-bn.fit(true.dag,data =train_rose,method="bayes",iss=10)
bgrain<-as.grain(bnFitted)
predict.bn.hpv <- predict(bgrain, response = c("HPVStatus"), 
                          predictors=names(test_set)[-1], 
                          newdata=test_set,
                          type="distribution")
pred.hpv<-prediction(data.frame(predict.bn.hpv[["pred"]])[,1],test_set$HPVStatus)#[,2]
roc<-performance(pred.hpv,"tpr","fpr")
plot(roc,
     col= "blue",
     ylab="True positive rate (sensitivity)",
     xlab="False positive rate (1-specificity)")
abline(a=0,b=1, col= "grey")
auc<-performance(pred.hpv,"auc")
auc<-unlist(slot(auc,"y.values"))
auc<-round(auc,4)
